type SimpleResponse {
    success: Boolean!
    message: String
}

enum UserRole {
    ADMIN
    STANDARD
}

type User {
    id: ID!
    email: String!
    role: UserRole!
    created(format: String = "YYYY-MM-DD @ HH:mm"): String!
    appointments: [Appointment]
}

enum AppointmentStatus {
    CREATED
    REJECTED
    APPROVED
}

type Appointment {
    id: ID!
    status: AppointmentStatus!
    issuer: User!
    receiver: User!
    startTime(format: String = "YYYY-MM-DD @ HH:mm"): String!
    endTime(format: String = "YYYY-MM-DD @ HH:mm"): String!
    created(format: String = "YYYY-MM-DD @ HH:mm"): String!
    description: String
}

type Query {
    me: User
    appointments: [Appointment]
    users: [User]
}

type SignInResponse {
    token: String
    result: SimpleResponse
    user: User
}

type SignUpResponseErrors {
    email: String
    password: String
    passwordConfirmation: String
}

type SignUpResponse {
    errors: SignUpResponseErrors
    result: SimpleResponse
    token: String
    user: User
}

type AppointmentResponseErrors {
    startTime: String
    endTime: String
    receiver: String
}

type AppointmentResponse {
    appointment: Appointment
    result: SimpleResponse
    errors: AppointmentResponseErrors
}

type Mutation {
    signIn(
        email: String!
        password: String!
    ): SignInResponse

    signUp(
        email: String!
        password: String!
        passwordConfirmation: String!
    ): SignUpResponse

    appointmentCreate(
        description: String
        startTime: String
        endTime: String
        "User ID"
        receiver: ID!
    ): AppointmentResponse

    appointmentReject(
        id: ID!
    ): AppointmentResponse

    appointmentApprove(
        id: ID!
    ): AppointmentResponse
}
